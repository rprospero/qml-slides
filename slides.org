#+TITLE: QML Tutorial
#+SUBTITLE: Better GUI with less effort
#+Author: Adam Washington
#+Date: 2023-06-28
#+SETUPFILE: ~/annex/slides/theme.org
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_THEME: dracula
#+REVEAL_INIT_OPTIONS: totalTime: 6300, plugins: [RevealNotes]
#+REVEAL_MULTIPLEX_ID: "bbebfa54fba8ab84"
#+REVEAL_MULTIPLEX_SECRET: "16878852250022031037"
#+REVEAL_MULTIPLEX_URL:  https://reveal-multiplex.glitch.me
#+OPTIONS:  toc:nil H:2

* Introduction

** QML

- A declarative method for defining GUIs
- Based on the Qt library
- Supports [[https://wiki.qt.io/Language_Bindings][over a dozen languages]].
- Declarative GUI, not imperative
- Divides code into a =model= and a =view=

#+BEGIN_NOTES
This repo is a tutorial set for understanding using QML with Python
for creating GUIs.  Python was chosen due to its status as a modern
/lingua franca/ of coding, but the concepts apply to [[https://wiki.qt.io/Language_Bindings][over a dozen
languages]].  In fact, the QML files allows changing the backend
implementation language without making any changes to the interface.

Through a series of alternating sections, we'll create a small data
analysis application.  We will attempt to alternate making changes to
the python and the QML to help emphasise the separation.
#+END_NOTES

** Model

- Performs detailed language and calculations
- Written in your favourite programming language
- Has *no knowledge* of the screen or window
- Only acts via =Properties=, =Signals=, and =Slots=

** Vocab

The Qt object model has a couple of pieces of vocab

  - Signal :: A message which may trigger actions from multiple parts of the application
  - Slot :: A routine that can be performed.  Can be connected to a signal
  - Property :: A value that can be read and optionally written.  May emit a signal when changed.

** View

- Describes the on screen display of the model
- Always written in QML
- Used to connect the Properties, Signals, and Slots of the models

** Why Bother?

- Code reuse
  - A model can have multiple views
  - A view can apply to multiple models
- Makes code easy to test
- Less bugs
- Shorter, more readable code
- No name litter

* Hello World

** Full Text

We'll start with the simplest possible QML example.

#+BEGIN_SRC js :tangle hello/view.qml :noweb yes
<<SimpleQMLImport>>

<<HelloContainer>>
#+END_SRC

** Imports

#+NAME:SimpleQMLImport
#+BEGIN_SRC js
import QtQuick 2.0
#+END_SRC

Every QML file starts with a set of imports.  You will always need to
import `QtQuick`, as it is the default QML library.  We'll encounter
more libraries as we continue.

** Widgets

#+NAME:HelloTextWidget
#+BEGIN_SRC js
Text {
  text: "Hello World!"
  anchors.centerIn: parent
}
#+END_SRC


- Widget type followed by curly bracket
- Attribute name, then colon, then value


** Anchors

- Describe constraints between edges of widgets
- Full control of positioning
- Lots of work

#+BEGIN_SRC js
Button {
  anchors.left: parent.left
  anchors.right: closeButton.left
  anchors.top: parent.top
  height: parent.height/2
}
#+END_SRC

** Layouts

- =ColumnLayout=, =RowLayout=, =GridLayout=
- Simpler to use
- Handle arbitrary number of Widgets

#+BEGIN_SRC js
import QtQuick.Layouts 1.2

ColumnLayout {
  Text {text: "Top"}
  Text {text: "Middle"}
  Text {text: "Bottom"}
}j
#+END_SRC

** Containers

#+Name:HelloContainer
#+BEGIN_SRC js :noweb yes
Rectangle {
  width: 600
  height: 600
  color: "green"
  <<HelloTextWidget>>
}
#+END_SRC

** Python Loading

Now we need to write some python to actually display the QML file

#+BEGIN_SRC python :tangle hello/main.py :noweb yes
from PySide2.QtQuick import QQuickView
<<QApplicationCreate>>
<<QQuickView>>
<<QApplicationRun>>
#+END_SRC

** QApplication

- Handles the busywork of running a GUI (e.g. managing event loop)
- Takes a set of command line arguments
  - Better integration into user environment
  - Enable visually impaired users to customise display

#+Name: QApplicationCreate
#+BEGIN_SRC python
from PySide2.QtWidgets import QApplication
import sys

app = QApplication(sys.argv)
#+END_SRC

Use the =exec_= method to start the application

#+Name: QApplicationRun
#+BEGIN_SRC python
app.exec_()
#+END_SRC


** QQuickView

- Handles the display of the QML file
- =setSource= picks the file
- Must `show` the view for it to appear on screen

#+Name: QQuickView
#+BEGIN_SRC python
view = QQuickView()
view.setSource("view.qml")
view.show()
#+END_SRC

** Exercises

- Change the background to a less garish colour
- Give a more personal greeting

* Compute Stats

** Model

We introduce our first data model class.

#+BEGIN_SRC python :tangle stats/model.py :noweb yes
import numpy as np
from PySide2.QtCore import QObject, Property
from PySide2.QtQml import QQmlApplicationEngine, qmlRegisterType
class Stats(QObject):
  _data = None
  def __init__(self):
        QObject.__init__(self)
        self.data_ = np.loadtxt("data.txt")
  <<PropertyFloat>>
  def x_mean(self):
        return np.mean(self.data_[:, 0])
  <<PropertyFloat>>
  def y_mean(self):
        return np.mean(self.data_[:, 1])
<<QmlRegisterType>>
#+END_SRC

#+BEGIN_SRC python :tangle stats/main.py :noweb yes :exports none
from PySide2.QtQuick import QQuickView
import model
<<QApplicationCreate>>
<<QQuickView>>
<<QApplicationRun>>
#+END_SRC

** qmlRegisterType

#+NAME: QmlRegisterType
#+BEGIN_SRC js
qmlRegisterType(Stats, "Tutorial", 1, 0, "Stats")
#+END_SRC

- Make python data accessible in QML
- Can only be performed on classes that inherit from QObject

** Property

#+NAME: PropertyFloat
#+BEGIN_SRC python
@Property(float)
#+END_SRC

- Makes class data accessible from QML
- Tells QML that the value is a =float=
- Accessible by the function name

** Data View

#+BEGIN_SRC js :tangle stats/view.qml :noweb yes
import QtQuick 2.0
<<TutorialImport>>

Rectangle {
  width: 600
  height: 600
  color: "#F0F0F0"
  <<LoadStats>>
  Text {
        <<ViewStats>>
        anchors.centerIn: parent
  }
}
#+END_SRC

** Tutorial Import

#+NAME: TutorialImport
#+BEGIN_SRC js
import Tutorial 1.0
#+END_SRC

Import the QML type that we declared earlier

** Load Stats

Create an instance of the stats object we defined earlier

#+NAME: LoadStats
#+BEGIN_SRC js
Stats {id: myStats;}
#+END_SRC

Add am instance of the =Stats= class we created to our application

#+NAME: ViewStats
#+BEGIN_SRC js
text: myStats.x_mean + ", " + myStats.y_mean
#+END_SRC

** Exercises

- Create a new property to display the sum of the columns

* Display

** Create a Header

We're going to add some header text to our window

#+Name: DisplayHeader
#+BEGIN_SRC js
Text {
  id: titleText
  text: "Stat Calculator"
  anchors.top: parent.top
  anchors.horizontalCenter: parent.horizontalCenter
}
#+END_SRC

** Data Display

We'll now display the x and y mean in a grid, instead of just a single label

#+Name: DisplayContent
#+BEGIN_SRC js
GridLayout {
  anchors.top: titleText.bottom
  anchors.bottom: parent.bottom
  anchors.left: parent.left
  anchors.right: parent.right

  columns: 2

  Text {text: "X mean"}
  Text {text: myStats.x_mean}
  Text {text: "Y mean"}
  Text {text: myStats.y_mean}
}
#+END_SRC

This also requires that we import

#+BEGIN_SRC js
import QtQuick.Layouts 1.2
#+END_SRC

#+BEGIN_SRC js :tangle display/view.qml :exports none :noweb yes
import QtQuick 2.0
import QtQuick.Layouts 1.2
import Tutorial 1.0

Rectangle {
  width: 600
  height: 600
  color: "#F0F0F0"

  Stats {
        id: myStats
  }

  <<DisplayHeader>>

  <<DisplayContent>>
}
#+END_SRC

** Exercises

- Put the X and Y means on the same row
- Move the title to the bottom of the window
- Move the title to the left side of the window
- Remove the GridLayout and layout the entire window with anchors (this will be tedious).

* Filename

** Signal

Allow the model to load any data file we want.  First, we'll need to
add a signal that will emit when the file name is changed.  (This will
be more important later).

#+NAME: FilenameSignal
#+BEGIN_SRC js
dataChanged = Signal()
#+END_SRC

** Filename Property

We now need to add a property for the file name.  The expanded
=Property= tag tells the model to update the property's value every
time the =dataChanged= signal is emitted.

#+NAME: FilenameGetter
#+BEGIN_SRC python
@Property(QUrl, notify=dataChanged)
def filename(self):
        """ The name of the data file """
        return self._filename
#+END_SRC

We'll also want to update the =Property= decorator for the other
properties to update them when the data is changed.

** Filename Setter

We're going to add our first property setter.  It's like the getter,
but takes an extra parameter for the new value.  We emit the
=dataChanged= signal at the end to indicate that the data has changed.

#+NAME: FilenameSetter
#+BEGIN_SRC python
@filename.setter
def filename(self, name):
        """ Load a new data file """
        self._filename = name
        self._data = np.loadtxt(name.toLocalFile())
        self.dataChanged.emit()
#+END_SRC

#+BEGIN_SRC python :tangle filename/model.py :noweb yes :exports none
import numpy as np
from PySide2.QtCore import QObject, Property, Signal, QUrl
from PySide2.QtQml import QQmlApplicationEngine, qmlRegisterType

class Stats(QObject):
        _data = None # The numbers to calculate over
        _filename = "";

        def __init__(self):
            """ Create the Stats object """
            QObject.__init__(self)

        <<FilenameSignal>>

        <<FilenameGetter>>

        <<FilenameSetter>>

        @Property(float, notify=dataChanged)
        def x_mean(self):
            """ The mean of the first column """
            if self._data is None:
                    return 0
            return np.mean(self._data[:, 0])

        @Property(float, notify=dataChanged)
        def y_mean(self):
            """ The mean of the second column """
            if self._data is None:
                    return 0
            return np.mean(self._data[:, 1])

qmlRegisterType(Stats, "Tutorial", 1, 0, "Stats")
#+END_SRC

** Update View

Since the model now picks the file through the =filename= property, we
need to update the view to pick a file.

#+NAME: FilenameStats
#+BEGIN_SRC js
Stats {
  id: myStats
  filename: "file:data.txt"
}
#+END_SRC

#+BEGIN_SRC js :tangle filename/view.qml :noweb yes :exports none
import QtQuick 2.0
import QtQuick.Layouts 1.2
import Tutorial 1.0

Rectangle {
  width: 600
  height: 600
  color: "#F0F0F0"

  <<FilenameStats>>

  <<DisplayHeader>>

  <<DisplayContent>>
}

#+END_SRC

** Exercises

- Set title text to the name of the data file

* Interactive

** Interactivity

After all this time, we'll finally add a truly interactive component.
Specifically, we'll add a =FileDialog= to the view to set the data
file.

#+NAME: FileDialog
#+BEGIN_SRC js
FileDialog {
  id: fileDialog
  title: "Choose a data file"
  onAccepted: myStats.filename = fileDialog.fileUrl
}
#+END_SRC

** Button

We have the file dialog, but we need a button to trigger the dialog

#+NAME: FileButton
#+BEGIN_SRC js
Button {
        id: loadButton
        anchors.top: titleText.bottom
        anchors.left: parent.left
        anchors.right: parent.right
        text: "Load file"
        onClicked: fileDialog.open()
}
#+END_SRC

#+BEGIN_SRC js :tangle interactive/view.qml :noweb yes :exports none
import QtQuick 2.0
import QtQuick.Controls 2.15
import QtQuick.Dialogs 1.3
import QtQuick.Layouts 1.2
import Tutorial 1.0

Rectangle {
  width: 600
  height: 600
  color: "#F0F0F0"

  <<FilenameStats>>

  <<FileDialog>>

  <<DisplayHeader>>

  <<FileButton>>

  <<DisplayContent>>
}
#+END_SRC

** Exercises

- Using the =console.log= slot, bind to the =dataChanged= signal on
  the =Stats= model and print the file name to the console every time
  the data changes.
- Find a better position for the file dialog button.
- Create a bool property on the Stats model that explains whether a
  file has been loaded.

* Display Tables

** QAbstractTableModel

- Thus far, every model that we've build has been based on QObject
- Special Subclasses for advanced data
  - QAbstractListModel :: Used for 1D data
  - QAbstractTableModel :: Used for 2D data
  - QAbstractItemModel :: Used for Tree Data

** Mandataory Overloads

- rowCount() :: Number of data elements
- columnCount() :: Number of properties on elements
- data(index, role) :: Access an element by index

** Recommended Overloads

- headerData(section, orientation, role) :: Column headers
- setData(index, value, role) :: Update an element by index
- flags(index) :: Metadata for an element

For our example app, we will not need these.

** Add Count Overloads

#+NAME: RowColumnCount
#+BEGIN_SRC python
@Slot()
def rowCount(self, parent):
    if self._data is None:
        return 0
    return self._data.shape[0]

@Slot()
def columnCount(self, parent):
    if self._data is None:
        return 0
    return self._data.shape[1]
#+END_SRC

** Add Data Overloads

#+NAME: TableData
#+BEGIN_SRC python
@Slot()
def data(self, index, role):
    if self._data is None:
        return None
    return float(self._data[index.row(),
                            index.column()])
#+END_SRC

** Signals

Just like other properties, the abstract models need signals to inform
the view of changes.  Thankfully, the class provides a series of
helper functions.

#+NAME: ResetModel
#+BEGIN_SRC python
@filename.setter
def filename(self, name):
    """ Load a new data file """
    self._filename = name
    self.beginResetModel()
    self._data = np.loadtxt(name.toLocalFile())
    self.endResetModel()
    self.dataChanged.emit()
#+END_SRC

#+BEGIN_SRC python :tangle table/model.py :noweb yes :exports none
import numpy as np
from PySide2.QtCore import Property, Signal, Slot, QAbstractTableModel, QUrl
from PySide2.QtQml import QQmlApplicationEngine, qmlRegisterType

class Stats(QAbstractTableModel):
        _data = None # The numbers to calculate over
        _filename = "";

        def __init__(self):
                """ Create the Stats object """
                QAbstractTableModel.__init__(self)

        <<FilenameSignal>>

        <<RowColumnCount>>

        <<TableData>>

        dataChanged = Signal()

        <<FilenameGetter>>

        <<ResetModel>>

        @Property(float, notify=dataChanged)
        def x_mean(self):
                """ The mean of the first column """
                if self._data is None:
                        return 0
                return np.mean(self._data[:, 0])

        @Property(float, notify=dataChanged)
        def y_mean(self):
                """ The mean of the second column """
                if self._data is None:
                        return 0
                return np.mean(self._data[:, 1])

qmlRegisterType(Stats, "Tutorial", 1, 0, "Stats")
#+END_SRC

** Table View

#+NAME: ResetModel
#+BEGIN_SRC python
TableView {
        anchors.top: loadButton.bottom
        anchors.bottom: parent.bottom
        anchors.left: parent.left
        width: parent.width/2
        model: myStats

        delegate: Rectangle {
                implicitWidth: parent.width/2
                implicitHeight: 30
                Text {
                        text: display
                }
        }
}
#+END_SRC

** Exercises

- The current code will produce glitches if the data file has more
  than two columns. Either ignore the other columns (easy) or allow an
  arbitrary column number.

* Charting

** One Model, Many Views

Using the =QAbstractTableModel= allows us to take advantage of
multiple views that can use this model.

Change how we view the data without changing a single line of Python.

** ChartView

#+NAME: ChartView
#+BEGIN_SRC js :noweb no-export
ChartView {
        title: "Scatters"
        anchors.top: loadButton.bottom
        anchors.bottom: parent.bottom
        anchors.left: parent.left
        anchors.right: parent.right
        antialiasing: true
        <<Axes>>
        <<ScatterPlot>>
        <<ModelMapper>>
}
#+END_SRC

Requires a new import

#+BEGIN_SRC js
import QtCharts 2.5
#+END_SRC

** Axes

Give ranges for our X and Y axes

#+NAME: Axes
#+BEGIN_SRC js
ValueAxis {
        id: axisX
        min: -5
        max: 5
}

ValueAxis {
        id: axisY
        min: -2
        max: 2
}
#+END_SRC

** Series

Create a scatter plot

#+NAME: ScatterPlot
#+BEGIN_SRC js
ScatterSeries {
        id: series
        name: myStats.filename
        axisX: axisX
        axisY: axisY
}
#+END_SRC

** Data

Connect the =myStats= model to the =series= scatter plot

#+NAME: ModelMapper
#+BEGIN_SRC js
VXYModelMapper {
        model: myStats
        series: series
        xColumn:0
        yColumn:1
}
#+END_SRC


#+BEGIN_SRC js :tangle chart/view.qml :noweb yes :exports none
import QtQuick 2.15
import QtQuick.Controls 2.15
import QtQuick.Dialogs 1.3
import QtQuick.Layouts 1.2
import QtCharts 2.5
import Tutorial 1.0

Rectangle {
  width: 800
  height: 800
  color: "#F0F0F0"

  <<FilenameStats>>

  <<FileButton>>

  <<FileDialog>>

  <<ChartView>>

}
#+END_SRC

** Exercises

- The current chart range is hard coded. Add the necessary data
  properties to the Stats model to allow the axes to scale with the
  data.




* Discussion

** Opinions on this training

- Would it be useful for Mantid developers?
- Would it be useful for Instrument Scientists?
