#+TITLE: QML Tutorial
#+SUBTITLE: Better GUI with less effort
#+Author: Adam Washington
#+Date: 2023-06-28
#+SETUPFILE: ~/annex/slides/theme.org
#+OPTIONS:  toc:nil H:2

* Introduction

** Introduction

This repo is a tutorial set for understanding using QML with Python
for creating GUIs.  Python was chosen due to its status as a modern
/lingua franca/ of coding, but the concepts apply to [[https://wiki.qt.io/Language_Bindings][over a dozen
languages]].  In fact, the QML files allows changing the backend
implementation language without making any changes to the interface.

Through a series of alternating sections, we'll create a small data
analysis application.  We will attempt to alternate making changes to
the python and the QML to help emphasise the separation.

* Hello World

** Full Text

We'll start with the simplest possible QML example.

#+BEGIN_SRC js :tangle hello/view.qml :noweb yes
<<SimpleQMLImport>>

<<HelloContainer>>
#+END_SRC

** Imports

#+NAME:SimpleQMLImport
#+BEGIN_SRC js
import QtQuick 2.0
#+END_SRC

Every QML file starts with a set of imports.  You will always need to
import `QtQuick`, as it is the default QML library.  We'll encounter
more libraries as we continue.

** Widgets

***                                                                   :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
#+NAME:HelloTextWidget
#+BEGIN_SRC js
Text {
  text: "Hello World!"
  anchors.centerIn: parent
}
#+END_SRC

***                                                                   :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:

- Widget type followed by curly bracket
- Attribute name, then colon, then value

** Positioning

There are two ways to position widgets in a window

***                                                               :B_columns:
:PROPERTIES:
:BEAMER_env: columns
:END:


**** Anchors                                                        :B_block:
:PROPERTIES:
:BEAMER_col: 0.5
:BEAMER_env: block
:END:

- Describe constraints between edges of widgets
- Full control of positioning
- Lots of work

#+BEGIN_SRC js
  anchors.left: parent.left
  anchors.right: closeButton.left
  anchors.top: parent.top
  height: parent.height/2
#+END_SRC

**** Layouts                                                        :B_block:
:PROPERTIES:
:BEAMER_col: 0.5
:BEAMER_env: block
:END:

- ColumnLayout, RowLayout, GridLayout
- Simpler to use
- Handle arbitrary number of Widgets

#+BEGIN_SRC js
import QtQuick.Layouts 1.2
#+END_SRC

** Containers

#+Name:HelloContainer
#+BEGIN_SRC js :noweb yes
Rectangle {
  width: 200
  height: 200
  color: "green"
  <<HelloTextWidget>>
}
#+END_SRC

** Python Loading

Now we need to write some python to actually display the QML file

#+BEGIN_SRC python :tangle hello/main.py :noweb yes
from PySide2.QtQuick import QQuickView
<<QApplicationCreate>>
<<QQuickView>>
<<QApplicationRun>>
#+END_SRC

** QApplication

- Handles the busywork of running a GUI (e.g. managing event loop)
- Takes a set of command line arguments
  - Better integration into user environment
  - Enable visually impaired users to customise display

***                                                               :B_example:
:PROPERTIES:
:BEAMER_env: example
:END:
#+Name: QApplicationCreate
#+BEGIN_SRC python
from PySide2.QtWidgets import QApplication
import sys

app = QApplication(sys.argv)
#+END_SRC

***                                                               :B_example:
:PROPERTIES:
:BEAMER_env: example
:END:

#+Name: QApplicationRun
#+BEGIN_SRC python
app.exec_()
#+END_SRC


** QQuickView

- Handles the display of the QML file
- =setSource= picks the file
- Must `show` the view for it to appear on screen

#+Name: QQuickView
#+BEGIN_SRC python
view = QQuickView()
view.setSource("view.qml")
view.show()
#+END_SRC

** Exercises

- Change the background to a less garish colour
- Give a more personal greeting

* Compute Stats

** Model

We introduce our first data model class.

#+BEGIN_SRC python :tangle stats/model.py :noweb yes
import numpy as np
from PySide2.QtCore import QObject, Property
from PySide2.QtQml import QQmlApplicationEngine, qmlRegisterType
class Stats(QObject):
  _data = None
  def __init__(self):
    QObject.__init__(self)
    self.data_ = np.loadtxt("data.txt")
  <<PropertyFloat>>
  def x_mean(self):
    return np.mean(self.data_[:, 0])
  <<PropertyFloat>>
  def y_mean(self):
    return np.mean(self.data_[:, 1])
<<QmlRegisterType>>
#+END_SRC

#+BEGIN_SRC python :tangle stats/main.py :noweb yes :exports none
from PySide2.QtQuick import QQuickView
import model
<<QApplicationCreate>>
<<QQuickView>>
<<QApplicationRun>>
#+END_SRC

** qmlRegisterType

#+NAME: QmlRegisterType
#+BEGIN_SRC js
qmlRegisterType(Stats, "Tutorial", 1, 0, "Stats")
#+END_SRC

- Make python data accessible in QML
- Can only be performed on classes that inherit from QObject

** Property

#+NAME: PropertyFloat
#+BEGIN_SRC python
@Property(float)
#+END_SRC

- Makes class data accessible from QML
- Tells QML that the value is a =float=
- Accessible by the function name

** Data View

#+BEGIN_SRC js :tangle stats/view.qml :noweb yes
import QtQuick 2.0
<<TutorialImport>>

Rectangle {
  width: 200
  height: 200
  color: "#F0F0F0"
  <<LoadStats>>
  Text {
    <<ViewStats>>
    anchors.centerIn: parent
  }
}
#+END_SRC

** Tutorial Import

#+NAME: TutorialImport
#+BEGIN_SRC js
import Tutorial 1.0
#+END_SRC

Import the QML type that we declared earlier

** Load Stats

Create an instance of the stats object we defined earlier

#+NAME: LoadStats
#+BEGIN_SRC js
Stats {id: myStats;}
#+END_SRC

Add am instance of the =Stats= class we created to our application

#+NAME: ViewStats
#+BEGIN_SRC js
text: myStats.x_mean + ", " + myStats.y_mean
#+END_SRC

** Exercises

- Create a new property to display the sum of the columns
